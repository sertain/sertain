buildscript {
    ext.kotlinVersion = '1.2.10'

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

allprojects {
    repositories {
        maven { url 'http://first.wpi.edu/FRC/roborio/maven/release' }
        maven { url 'https://raw.githubusercontent.com/Open-RIO/Maven-Mirror/master/m2' }
        maven { url 'http://dev.imjac.in/maven/' }
        jcenter()
    }

    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    // No-op if it's the root lib
    if (project == project.rootProject) return

    // Task to generate sources JAR
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.kotlin.srcDirs
    }

    // Use tasks above to define artifacts
    artifacts {
        archives sourcesJar
    }

    publishing {
        // By passing -Pcustom_local=/some/path and running the
        // publishLibraryPublicationToCustomLocalRepository task you can publish this library to a
        // custom maven repository location on your machine.
        repositories {
            maven {
                name 'CustomLocal'
                url uri(project.hasProperty('custom_local') ? project.getProperty('custom_local') : '/tmp/')
            }
        }

        repositories {
            maven {
                name 'BuildLocal'
                url "$buildDir/repo"
            }
        }
    }

    publishing {
        publications {
            "${project.name}"(MavenPublication) {

                groupId "org.sert2521"
                artifactId project.name
                version "0.0.1"

                artifact "$buildDir/libs/${project.name}.jar"
                artifact sourcesJar

                pom.withXml {
                    // Dependencies
                    def dependenciesNode = asNode().getAt("dependencies")[0]
                    if (dependenciesNode == null) {
                        dependenciesNode = asNode().appendNode("dependencies")
                    }

                    // Add all that are 'compile'
                    configurations.compile.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
